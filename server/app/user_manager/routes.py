from datetime import datetime, timezone
from typing import Optional
from pydantic import BaseModel
from fastapi import APIRouter, Depends, Form, HTTPException, Query
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
import jwt
from sqlalchemy.orm import Session
from app.database import get_db
from app.user_manager.user import User
from .user_controller import ALGORITHM, SECRET_KEY, create_user, authenticate_user, get_current_user, hash_password, is_user_verified, oauth2_scheme, send_password_reset_email, update_user_email, update_user_password
import logging

user_manager_router = APIRouter(tags=["Users"])


@user_manager_router.post("/register", description="Create a new user in the system.")
async def register(
    db: Session = Depends(get_db),
    email: str = Form(...),
    password: str = Form(...),
    locale: str = Query(
        'en', description="Language for the confirmation message. Options: 'ua' for Ukrainian, 'en' for English.")
):
    response = await create_user(db, email, password, locale)
    logging.debug(f"Retrieved response: {response}")

    # –¢–µ–ø–µ—Ä —Ç—Ä–µ–±–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ content
    return response

# –î–æ–¥–∞—î–º–æ OAuth2 —Å—Ö–µ–º—É –¥–ª—è Swagger UI
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


class TokenResponse(BaseModel):
    access_token: str
    token_type: str

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–æ—Ç—Ä–∏–º–∞–Ω–Ω—è JWT-—Ç–æ–∫–µ–Ω–∞)


@user_manager_router.post("/token", response_model=TokenResponse, include_in_schema=False)
def login_for_access_token(
    db: Session = Depends(get_db),
    form_data: OAuth2PasswordRequestForm = Depends()
):
    email = form_data.username
    auth_result = authenticate_user(db, email, form_data.password)

    if isinstance(auth_result, JSONResponse):
        raise HTTPException(
            status_code=auth_result.status_code,
            detail=auth_result.body.decode() if hasattr(
                auth_result, "body") else auth_result.content
        )

    return auth_result["data"]  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∞–º–µ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–æ–∫–µ–Ω—É


@user_manager_router.post("/login_with_email")
def login_with_email(
    email: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    result = authenticate_user(db, email, password)
    user = db.query(User).filter(User.email == email).first()
    if user.is_email_verified == False:
        return JSONResponse(
            status_code=403,
            content={
                "detail": "Email not verified",
                "data": None
            }
        )

    # –Ø–∫—â–æ —Ü–µ JSONResponse ‚Äî —Ç–æ–±—Ç–æ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—ó
    if isinstance(result, JSONResponse):
        return result

    # –Ü–Ω–∞–∫—à–µ ‚Äî —É—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
    return result


@user_manager_router.get("/verify_email", response_class=JSONResponse)
async def verify_email(token: str, db: Session = Depends(get_db)):
    try:
        # –î–µ–∫–æ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email = payload.get("sub")

        if email is None:
            return JSONResponse(
                status_code=400,
                content={
                    "detail": "Invalid token",
                    "data": None
                }
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email
        user = db.query(User).filter(User.email == email).first()
        if not user:
            return JSONResponse(
                status_code=404,
                content={
                    "detail": "User not found",
                    "data": None
                }
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ email
        if user.is_email_verified:
            return JSONResponse(
                status_code=200,
                content={
                    "detail": "Email already verified ‚úÖ",
                    "data": None
                }
            )

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
        user.is_email_verified = True
        db.commit()

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        return JSONResponse(
            status_code=200,
            content={
                "detail": "Thank you! Your email has been verified üéâ",
                "data": None
            }
        )

    except jwt.PyJWTError:
        return JSONResponse(
            status_code=400,
            content={
                "detail": "Invalid or expired token",
                "data": None
            }
        )


@user_manager_router.get("/profile")
def get_profile(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    logging.debug("Received request for profile with token: %s",
                  token)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

    if not token:
        logging.error("Token is missing.")
        # –ü–æ–≤–µ—Ä—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —á–µ—Ä–µ–∑ JSONResponse
        return JSONResponse(status_code=400, content={"detail": "Token is missing"})

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    current_user = get_current_user(token, db)

    # –Ø–∫—â–æ current_user —î JSONResponse (–ø–æ–º–∏–ª–∫–∞ –≤ get_current_user), —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    if isinstance(current_user, JSONResponse):
        return current_user  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ JSONResponse –ø–æ–º–∏–ª–∫–∏

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    logging.debug("User found: %s", current_user.email)

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ JSONResponse
    return JSONResponse(
        status_code=200,
        content={
            "detail": "User retrieved successfully",
            "data": {
                "id": current_user.id,
                "email": current_user.email,
                "synchronized_at": current_user.synchronized_at.isoformat() if current_user.synchronized_at else None

            }
        }
    )

@user_manager_router.post("/synchronize")
def synchronize_user_data(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    logging.debug("Received request for synchronization with token: %s",
                  token)
    current_user = get_current_user(token, db)

    # –Ø–∫—â–æ current_user —î JSONResponse (–ø–æ–º–∏–ª–∫–∞ –≤ get_current_user), —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    if isinstance(current_user, JSONResponse):
        return current_user  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ JSONResponse –ø–æ–º–∏–ª–∫–∏

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    logging.debug("User found: %s", current_user.email)
    current_user.synchronized_at = datetime.now(timezone.utc)
    db.commit()
    return JSONResponse(
    status_code=200,
    content={
        "detail": "Synchronized data updated",
        "data": {
            "synchronized_at": current_user.synchronized_at.isoformat() if current_user.synchronized_at else None
        }
    }
)

    

@user_manager_router.get("/is_activated")
def is_user_activated(user_id: int, db: Session = Depends(get_db)):
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π
        is_verified = is_user_verified(user_id, db)
        return JSONResponse(
            status_code=200,
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            content={"is_activated": is_verified}
        )
    except Exception as e:
        logging.error("Unexpected error: %s", str(e))
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal Server Error"}
        )


@user_manager_router.post("/forgot-password", summary="Initiates a password reset process")
async def forgot_password(
        email: str = Form(...),
        # –ú–æ–≤–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞)
        locale: str = Query('en'),
        db: Session = Depends(get_db)
):
    """
    **Initiates the password reset process for the user**

    - **Parameters**:
        - `email`: The email address associated with the account.
        - `password`: The current password of the user.
        - `locale`: Language for the confirmation message. Options: 'ua' for Ukrainian, 'en' for English.

    - **Response**:
        - `200 OK`: Password reset link sent successfully.
        - `400 Bad Request`: Invalid email format.
        - `404 Not Found`: User not found.
        - `500 Internal Server Error`: Unexpected server error.
    """

    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤–∂–µ –≥–æ—Ç–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∑ —Ñ–æ—Ä–º–æ—é —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        response = await send_password_reset_email(
            db=db,
            email=email,
            locale=locale
        )
        return response

    except HTTPException as e:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–Ω–∏–∫–∞—é—Ç—å
        return JSONResponse(status_code=e.status_code, content={"detail": e.detail})

    except Exception as e:
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        return JSONResponse(status_code=500, content={"detail": f"Internal server error: {str(e)}"})


@user_manager_router.get("/change-password-form", summary="Gets the password change form for the currently authenticated user", response_class=HTMLResponse, include_in_schema=False)
async def get_change_password_form_from_forgot_password(
    db: Session = Depends(get_db),
    token: str = Query(),
    locale: Optional[str] = 'en'
):
    """
    **Gets the form for changing the password for the currently authenticated user**

    - **Headers**: `Authorization: Bearer <token>`
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω—É
        current_user = get_current_user(token, db)

        if locale == "ua":
            # –°—Ç–≤–æ—Ä—é—î–º–æ HTML —Ñ–æ—Ä–º—É –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
            html_form = f"""
            <html>
                <body>
                    <h2>–ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è</h2>
                    <form id="changePasswordForm"action="/change-password-form" method="PUT" onsubmit="handleSubmit(event)">
                        <label for="new_password">–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:</label>
                        <input type="password" id="new_password" name="new_password" required><br><br>
                        <label for="confirm_password">–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:</label>
                        <input type="hidden" id="token" value="{{ token }}">
                        <input type="password" id="confirm_password" name="confirm_password" required><br><br>
                        <input type="submit" value="–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å">
                    </form>
                    <script>
                async function handleSubmit(event) {{
                    event.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ä–º–∏
                    
                    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏
                    const form = document.getElementById("changePasswordForm");
                    const formData = new FormData(form);
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ —Ö–∞—Ä–¥–∫–æ–¥—É –∞–±–æ –≤—Å—Ç–∞–≤–ª—è—î–º–æ —è–∫ –∑ —Å–µ—Ä–≤–µ—Ä—É
                    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ URL
                    const urlParams = new URLSearchParams(window.location.search);
                    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "token"
                    const token = urlParams.get('token');
                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
    if (token) {{
        console.log("Token:", token);
    }} else {{
        console.log("Token not found in URL.");
    }}
                    // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ —Å–µ—Ä–≤–µ—Ä—É
                    try {{
                        const response = await fetch("/change-password-form?token=" + token, {{
                            method: "PUT", // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –º–µ—Ç–æ–¥–æ–º PUT
                            body: formData
                        }});

                        if (response.ok) {{
                            // –Ø–∫—â–æ –∑–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è —É—Å–ø—ñ—à–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É
                            window.location.href = "/change-password-success";
                        }} else {{
                            // –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            alert("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                        }}
                    }} catch (error) {{
                        console.error("Error:", error);
                        alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç—É.");
                    }}
                }}
            </script>
                </body>
            </html>

            """
        else:
            html_form = f"""
            <html>
                <body>
                    <h2>Password change form</h2>
                    <form id="changePasswordForm"action="/change-password-form" method="PUT" onsubmit="handleSubmit(event)">
                        <label for="new_password">New password:</label>
                        <input type="password" id="new_password" name="new_password" required><br><br>
                        <label for="confirm_password">Confirm new password:</label>
                        <input type="hidden" id="token" value="{{ token }}">
                        <input type="password" id="confirm_password" name="confirm_password" required><br><br>
                        <input type="submit" value="Submit">
                    </form>
                    <script>
                async function handleSubmit(event) {{
                    event.preventDefault();
                    
                    const form = document.getElementById("changePasswordForm");
                    const formData = new FormData(form);
                    
                    const urlParams = new URLSearchParams(window.location.search);
                    const token = urlParams.get('token');
    if (token) {{
        console.log("Token:", token);
    }} else {{
        console.log("Token not found in URL.");
    }}
                    try {{
                        const response = await fetch("/change-password-form?token=" + token, {{
                            method: "PUT", // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –º–µ—Ç–æ–¥–æ–º PUT
                            body: formData
                        }});

                        if (response.ok) {{
                            window.location.href = "/change-password-success";
                        }} else {{
                            alert("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                        }}
                    }} catch (error) {{
                        console.error("Error:", error);
                        alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç—É.");
                    }}
                }}
            </script>
                </body>
            </html>

            """
        return HTMLResponse(content=html_form)

    except Exception as e:
        logging.error(f"Error getting password change form: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@user_manager_router.put("/change-password-form", summary="Changes the password for the currently authenticated user", include_in_schema=False)
async def change_password_form_from_forgot_password(
    db: Session = Depends(get_db),
    token: str = Query(...),
    new_password: str = Form(...),
    confirm_password: str = Form(...),
):
    """
    **Changes the password for the currently authenticated user after form submission**

    - **Headers**: `Authorization: Bearer <token>`
    - **Parameters**: `current_password`, `new_password`, `confirm_password`
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å
        if new_password != confirm_password:
            raise HTTPException(
                status_code=400, detail="New password and confirm password do not match")

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω—É
        current_user = get_current_user(token, db)
    except HTTPException as e:
        logging.error(f"Error in password change: {e.detail}")
        raise e
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

        # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
    user = db.query(User).filter(User.id == current_user.id).first()

    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º)
    # –£–≤–∞–≥–∞: —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å
    user.password = hash_password(new_password)
    db.commit()

    return RedirectResponse(url="/change-password-success", status_code=303)


@user_manager_router.get("/change-password-success", summary="Success page for password change", response_class=HTMLResponse, include_in_schema=False)
async def change_password_success(locale: Optional[str] = 'en'):
    if locale=="ua":
        return HTMLResponse(content="<html><body><h2>–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!</h2></body></html>")
    else:
        return HTMLResponse(content="<html><body><h2>Password changed!</h2></body></html>")


@user_manager_router.put("/change-password", summary="Changes the password for the currently authenticated user")
def change_password(
    db: Session = Depends(get_db),
    token: str = Depends(oauth2_scheme),
    old_password: str = Form(...),
    new_password: str = Form(...)
):
    """
    **Changes the password for the currently authenticated user**

    - **Headers**: `Authorization: Bearer <token>`
    - **Parameters**:
        - `old_password`: Current password.
        - `new_password`: New password.
    - **Response**:
        - `200 OK`: Password changed successfully.
        - `400 Bad Request`: Old password is incorrect.
        - `401 Unauthorized`: User is not authenticated.
    """

    try:
        current_user = get_current_user(token, db)
        result = update_user_password(
            db, current_user, old_password, new_password)
        return JSONResponse(status_code=200, content=result)

    except HTTPException as e:
        logging.error(f"Error updating password: {e.detail}")
        return JSONResponse(status_code=e.status_code, content={"detail": e.detail, "data": ""})

    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return JSONResponse(status_code=500, content={"detail": "Internal server error", "data": ""})


@user_manager_router.put("/change-email", summary="Changes the email for the currently authenticated user")
async def change_email(
        db: Session = Depends(get_db),
        token: str = Depends(oauth2_scheme),
        password: str = Form(...),
        new_email: str = Form(...),
        locale: str = Query('ua')):
    """
    **Changes the email for the currently authenticated user**
    """
    try:
        current_user = get_current_user(token, db)
        if current_user is None:
            raise HTTPException(status_code=404, detail="User not found")
        logging.debug(current_user.email)
        result = await update_user_email(
            db, current_user, password, new_email, locale)
        return result  # –ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ update_user_email

    except HTTPException as e:
        logging.error(f"Error updating email: {e.detail}")
        return JSONResponse(status_code=e.status_code, content={"detail": e.detail})

    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return JSONResponse(status_code=500, content={"detail": "Internal server error"})
