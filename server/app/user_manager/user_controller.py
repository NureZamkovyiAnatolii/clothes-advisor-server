import re
from typing import Optional
import bcrypt
from fastapi.responses import JSONResponse
import jwt
import os
import logging
from datetime import datetime, timedelta, timezone
from scipy import stats
from sqlalchemy.orm import Session
from fastapi import HTTPException
from sqlalchemy.exc import SQLAlchemyError
from fastapi.security import OAuth2PasswordBearer

from app.user_manager.mail_controller import send_password_change_form, send_verification_code, send_verification_link
from .user import User

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è JWT
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "supersecretkey")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30  # –ß–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω—É
SERVER_URL = os.getenv("SERVER_URL")

# FastAPI security scheme (–æ—á—ñ–∫—É—î —Ç–æ–∫–µ–Ω —É –∑–∞–≥–æ–ª–æ–≤–∫—É Authorization)
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


# üîπ –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
def hash_password(password: str) -> str:
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hashed_password.decode('utf-8')

# üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è


def verify_password(plain_password: str, hashed_password: str) -> bool:
    return bcrypt.checkpw(plain_password.encode('utf-8'), hashed_password.encode('utf-8'))


# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞


async def create_user(db: Session, email: str, password: str, locale: str):
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É email
        email_regex = r"(^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$)"
        if not re.match(email_regex, email):
            return JSONResponse(
                status_code=400,
                content={
                    "detail": "Invalid email format",
                    "data": None
                }
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ email –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ
        user = db.query(User).filter(User.email == email).first()
        if user:
            return JSONResponse(
                status_code=400,
                content={
                    "detail": "Email is already taken",
                    "data": None
                }
            )

        # –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        hashed_password = hash_password(password)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = User(
            email=email,
            password=hashed_password,
            is_email_verified=False,
        )

        db.add(user)
        db.commit()
        db.refresh(user)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –¥–æ—Å—Ç—É–ø—É
        token = create_access_token(
            {"sub": email}, expires_delta=timedelta(hours=24))

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
        await send_verification_link(email, token, locale)

        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ —É—Å–ø—ñ—Ö
        return JSONResponse(
            status_code=201,
            content={
                "detail": "Resister successful. Please verify your email",
                "data": {
                    "access_token": token,
                    "token_type": "bearer"
                }
            }
        )

    except SQLAlchemyError as e:
        db.rollback()
        return JSONResponse(
            status_code=500,
            content={
                "detail": "Database error",
                "data": None
            }
        )


# üîπ Authenticate user and generate JWT token
def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.now(
        timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})  # –î–æ–¥–∞—î–º–æ —á–∞—Å –¥—ñ—ó —Ç–æ–∫–µ–Ω—É
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# üîπ –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JWT-—Ç–æ–∫–µ–Ω–∞


def authenticate_user(db: Session, email: str, password: str):
    user = db.query(User).filter(User.email == email).first()
    logging.debug(f"Retrieved user: {user}")

    # Check if user exists in DB
    if not user:
        logging.debug(f"No user found with email: {email}")
        return JSONResponse(
            status_code=404,
            content={
                "detail": "User not found",
                "data": None
            }
        )

    # Check password
    if not verify_password(password, user.password):
        logging.debug(f"Authentication failed for user: {email}")
        return JSONResponse(
            status_code=401,
            content={
                "detail": "Incorrect password",
                "data": None
            }
        )

    # Generate token for the user
    access_token = create_access_token(
        data={"sub": str(user.email)},
        expires_delta=timedelta(minutes=30)
    )

    return {
        "detail": "Authentication successful",
        "data": {
            "access_token": access_token,
            "token_type": "bearer"
        }
    }


def get_current_user(token: str, db: Session):
    logging.debug("Decoding token: %s", token)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_email: str = payload.get("sub")
        if not user_email:
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ email –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
            logging.error("Invalid token: User email not found")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ JSONResponse –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return JSONResponse(status_code=401, content={"detail": "Invalid token"})
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        logging.debug("Decoded user email: %s", user_email)
    except jwt.ExpiredSignatureError:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π
        logging.error("Token has expired")
        return JSONResponse(status_code=401, content={"detail": "Token has expired"})
    except jwt.PyJWTError as e:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        logging.error("JWT decoding error: %s", str(e))
        return JSONResponse(status_code=401, content={"detail": "Could not validate credentials"})

    user = db.query(User).filter(User.email == user_email).first()
    if user is None:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
        logging.debug("User with email %s not found in DB", user_email)
        return JSONResponse(status_code=401, content={"detail": "User not found"})
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    logging.debug("User found in DB: %s", user.email)
    return user  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω –∑–Ω–∞–π–¥–µ–Ω–∏–π


def get_current_user_id(token: str, db: Session):
    logging.debug("Decoding token: %s", token)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_email: str = payload.get("sub")
        if not user_email:
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ ID –≤—ñ–¥—Å—É—Ç–Ω—î
            logging.error("Invalid token: User ID not found")
            raise HTTPException(status_code=401, detail="Invalid token")
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        logging.debug("Decoded user email: %s", user_email)
    except jwt.PyJWTError as e:
        logging.debug("JWT error: %s", str(e))  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        raise HTTPException(
            status_code=401, detail="Could not validate credentials")

    user = db.query(User).filter(User.email == user_email).first()
    if user is None:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
        logging.debug("User with email %s not found in DB", user_email)
        raise HTTPException(status_code=401, detail="User not found")
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    logging.debug("User found in DB: %s", user.email)
    return user.id


def is_user_verified(user_id, db: Session) -> bool:
    user = db.query(User).filter(User.id == user_id).first()
    return user is not None and user.is_email_verified

# Functions to update the user's password
def create_password_reset_token(email: str, expires_delta: timedelta = timedelta(hours=1)) -> str:
    """
    Creates a password reset token.

    - **Parameters**:
        - `email`: User's email address.
        - `expires_delta`: Expiration time for the token.

    - **Returns**: JWT token for password reset.
    """
    to_encode = {"sub": email, "exp": datetime.utcnow() + expires_delta}
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
async def send_password_reset_email(db: Session, email: str, locale: Optional[str] = 'en'):
    """
    Sends a password reset form to the user's email after verifying the password.
    
    - **Parameters**:
        - `db`: Database session.
        - `email`: User's email address.
        - `locale`: The language for the reset message ('ua' for Ukrainian, 'en' for English).
    - **Raises**:
        - HTTPException: If the email doesn't exist or the password is incorrect.
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –≤–∫–∞–∑–∞–Ω–∏–º email
    user = db.query(User).filter(User.email == email).first()

    if not user:
        raise HTTPException(status_code=404, detail="User not found")


    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    reset_token = create_password_reset_token(email=email)

    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
    reset_url = f"{SERVER_URL}/change-password-form?token={reset_token}&locale={locale}"

    # –°—Ç–≤–æ—Ä—é—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –º–æ–≤–∏
    if locale == 'ua':
        html_content = f"""
        <html>
            <body>
                <h3>–ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>
                <p>–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ:</p>
                <a href="{reset_url}">–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å</a>
                <p>–Ø–∫—â–æ –≤–∏ –Ω–µ —Ä–æ–±–∏–ª–∏ –∑–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.</p>
            </body>
        </html>
        """
        subject="–ó–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É –ø–∞—Ä–æ–ª—è"
    else:
        html_content = f"""
        <html>
            <body>
                <h3>Password Change</h3>
                <p>To change your password, click the link below:</p>
                <a href="{reset_url}">Change Password</a>
                <p>If you did not request a password change, please ignore this email.</p>
            </body>
        </html>
        """
        subject="Password change request"

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        await send_password_change_form(
            email=email,
            subject=subject,
            html_content=html_content
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to send email: {str(e)}")

    return {"detail": "Password reset email sent successfully."}

def update_user_password(db: Session, user: User, old_password: str, new_password: str):
    """
    Updates the user's password after verifying the old password.

    :param db: Database session
    :param user: The current user (User object)
    :param old_password: The user's current password
    :param new_password: The new password for the user
    :raises HTTPException: If the old password is incorrect
    :return: A message confirming the successful password change
    """
    if not verify_password(old_password, user.password):
        raise HTTPException(status_code=400, detail="Incorrect old password")

    user.password = hash_password(new_password)
    db.commit()

    return {"detail": "Password successfully updated", "data": ""}

# Function to update the user's email


async def update_user_email(db: Session, user: User, password: str, new_email: str, locale: str):
    """
    Updates the user's email after verifying the password.
    """
    if not verify_password(password, user.password):
        raise HTTPException(status_code=400, detail="Incorrect password")
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É email
        email_regex = r"(^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$)"
        if not re.match(email_regex, new_email):
            raise HTTPException(
                status_code=400,
                detail="Invalid email format"
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ email –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ
        test_user = db.query(User).filter(User.email == new_email).first()
        if test_user:
            raise HTTPException(
                status_code=400,
                detail="Email is already taken"
            )
        logging.error(f"Updating email from { user.email} to  {new_email}")
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –¥–æ—Å—Ç—É–ø—É
        token = create_access_token(
            {"sub": new_email}, expires_delta=timedelta(hours=24))

    except SQLAlchemyError as e:
        db.rollback()
        raise HTTPException(
            status_code=500,
            detail="Database error"
        )
    user.email = new_email
    user.is_email_verified = False
    db.commit()
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
    await send_verification_link(new_email, token, locale)

    return {"detail": "Email successfully updated. Please verify new email", "data": ""}
