import bcrypt
import jwt
import os
import logging
from datetime import datetime, timedelta, timezone
from sqlalchemy.orm import Session
from fastapi import HTTPException
from sqlalchemy.exc import SQLAlchemyError
from fastapi.security import OAuth2PasswordBearer

from app.user_manager.mail_controller import send_verification_code, send_verification_link
from .user import User

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è JWT
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "supersecretkey")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30  # –ß–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω—É

# FastAPI security scheme (–æ—á—ñ–∫—É—î —Ç–æ–∫–µ–Ω —É –∑–∞–≥–æ–ª–æ–≤–∫—É Authorization)
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


# üîπ –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
def hash_password(password: str) -> str:
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hashed_password.decode('utf-8')

# üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def verify_password(plain_password: str, hashed_password: str) -> bool:
    return bcrypt.checkpw(plain_password.encode('utf-8'), hashed_password.encode('utf-8'))

# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def create_user(db: Session, email: str, password: str, locale: str):
    try:
        hashed_password = hash_password(password)

        user = User(
            email=email,
            password=hashed_password,
            is_email_verified=False,  # Email —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π
        )
        
        db.add(user)
        db.commit()
        db.refresh(user)
        user = db.query(User).filter(User.email == email).first()
        token = create_access_token({"sub": email}, expires_delta=timedelta(hours=24))
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª—ñ–Ω–∫—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
        await send_verification_link(email, token, locale)  
        return {"user": user, "access_token": token, "token_type": "bearer"}
    except SQLAlchemyError as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

# üîπ –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JWT-—Ç–æ–∫–µ–Ω–∞
def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})  # –î–æ–¥–∞—î–º–æ —á–∞—Å –¥—ñ—ó —Ç–æ–∫–µ–Ω—É
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# üîπ –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JWT-—Ç–æ–∫–µ–Ω–∞
def authenticate_user(db: Session, email: str, password: str):
    user = db.query(User).filter(User.email == email).first()
    logging.debug(f"Retrieved user: {user}")

    if not user or not verify_password(password, user.password):
        logging.debug(f"Authentication failed for user: {email}")
        raise HTTPException(status_code=401, detail="Invalid credentials")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    access_token = create_access_token(data={"sub": str(user.id)}, expires_delta=timedelta(minutes=30))
    return {"access_token": access_token, "token_type": "bearer"}

def get_current_user(token: str, db: Session):
    logging.debug("Decoding token: %s", token)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        if not user_id:
            logging.error("Invalid token: User ID not found")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ ID –≤—ñ–¥—Å—É—Ç–Ω—î
            raise HTTPException(status_code=401, detail="Invalid token")
        logging.debug("Decoded user ID: %s", user_id)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    except jwt.PyJWTError as e:
        logging.debug("JWT error: %s", str(e))  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        raise HTTPException(status_code=401, detail="Could not validate credentials")

    user = db.query(User).filter(User.id == user_id).first()
    if user is None:
        logging.debug("User with ID %s not found in DB", user_id)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
        raise HTTPException(status_code=401, detail="User not found")
    logging.debug("User found in DB: %s", user.email)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    return user

def get_current_user_id(token: str, db: Session):
    logging.debug("Decoding token: %s", token)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        if not user_id:
            logging.error("Invalid token: User ID not found")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ ID –≤—ñ–¥—Å—É—Ç–Ω—î
            raise HTTPException(status_code=401, detail="Invalid token")
        logging.debug("Decoded user ID: %s", user_id)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    except jwt.PyJWTError as e:
        logging.debug("JWT error: %s", str(e))  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        raise HTTPException(status_code=401, detail="Could not validate credentials")

    user = db.query(User).filter(User.id == user_id).first()
    if user is None:
        logging.debug("User with ID %s not found in DB", user_id)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
        raise HTTPException(status_code=401, detail="User not found")
    logging.debug("User found in DB: %s", user.email)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    return user.id

def is_user_verified(user_id, db: Session) -> bool:
    user = db.query(User).filter(User.id == user_id).first()
    return user is not None and user.is_email_verified

def update_user_password(db: Session, user: User, old_password: str, new_password: str):
    """
    –û–Ω–æ–≤–ª—é—î –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è.
    
    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    :param user: –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (–æ–±'—î–∫—Ç User)
    :param old_password: –ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param new_password: –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :raises HTTPException: –Ø–∫—â–æ —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
    :return: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –∑–º—ñ–Ω—É –ø–∞—Ä–æ–ª—è
    """
    if not verify_password(old_password, user.password):
        raise HTTPException(status_code=400, detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å")

    user.password = hash_password(new_password)
    db.commit()

    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ"}

def update_user_email(db: Session, user: User, password: str, new_email: str):
    if not verify_password(password, user.password):
        raise HTTPException(status_code=400, detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å")

    user.email = new_email
    db.commit()

    return {"message": "Email —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ"}